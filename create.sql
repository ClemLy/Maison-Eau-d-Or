DROP TABLE IF EXISTS FAQ CASCADE;
DROP TABLE IF EXISTS A_PROPOS CASCADE;
DROP TABLE IF EXISTS SHOWCASE CASCADE;
DROP TABLE IF EXISTS PRODUCT_CATEGORY CASCADE;
DROP TABLE IF EXISTS PRODUCT_IMAGE CASCADE;
DROP TABLE IF EXISTS CATEGORY CASCADE;
DROP TABLE IF EXISTS CART CASCADE;
DROP TABLE IF EXISTS ORDER_PRODUCT CASCADE;
DROP TABLE IF EXISTS PRODUCT CASCADE;
DROP TABLE IF EXISTS ORDERS CASCADE;
DROP TABLE IF EXISTS ARTICLE CASCADE;
DROP TABLE IF EXISTS CAROUSEL CASCADE;
DROP TABLE IF EXISTS IMAGE CASCADE;
DROP TABLE IF EXISTS USERS CASCADE;

-- Create
CREATE TABLE USERS (
    id_user SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    phone_number VARCHAR(10),
    newsletter BOOLEAN NOT NULL DEFAULT FALSE,
    reset_token VARCHAR(255),
	reset_token_exp TIMESTAMP,
    activ_token VARCHAR(255),
    activ_exp TIMESTAMP,
    is_verified     BOOLEAN DEFAULT FALSE,
    remember_token  VARCHAR(255),
    create_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    is_admin BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE IMAGE (
    id_img SERIAL PRIMARY KEY,
    img_name VARCHAR(255) NOT NULL,
    img_path VARCHAR(255) NOT NULL
);

CREATE TABLE CAROUSEL (
    id_car SERIAL PRIMARY KEY,
    id_img INT NOT NULL,
    link_car VARCHAR(255) NOT NULL,
    FOREIGN KEY (id_img) REFERENCES IMAGE(id_img)
);

CREATE TABLE ARTICLE(
    id_art SERIAL PRIMARY KEY,
    id_img INT NOT NULL,
    art_title VARCHAR(255) NOT NULL,
    art_text TEXT NOT NULL,
    art_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_img) REFERENCES IMAGE(id_img)
);

CREATE TABLE ORDERS (
    id_order SERIAL PRIMARY KEY,
    id_user INT NOT NULL,
    order_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    phone_number_order VARCHAR(10) NOT NULL,
    address_street VARCHAR(255) NOT NULL,
    address_city VARCHAR(255) NOT NULL,
    address_zip VARCHAR(5) NOT NULL,
    address_country VARCHAR(255) NOT NULL,
    statut_commande VARCHAR(255) CHECK (statut_commande IN ('En attente', 'En cours', 'Envoyé')) NOT NULL DEFAULT 'En attente',
    FOREIGN KEY (id_user) REFERENCES USERS(id_user)
);

CREATE TABLE PRODUCT (
    id_prod SERIAL PRIMARY KEY,
    p_name VARCHAR(255) NOT NULL,
    p_price FLOAT NOT NULL,
    description TEXT NOT NULL,
    on_sale BOOLEAN NOT NULL DEFAULT FALSE,
    is_star BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE CATEGORY (
  id_cat SERIAL PRIMARY KEY,
  cat_name VARCHAR(255) NOT NULL
);

CREATE TABLE PRODUCT_CATEGORY (
  id_prod INT NOT NULL,
  id_cat INT NOT NULL,
  PRIMARY KEY (id_prod, id_cat),
  FOREIGN KEY (id_prod) REFERENCES PRODUCT(id_prod) ON DELETE CASCADE,
  FOREIGN KEY (id_cat) REFERENCES CATEGORY(id_cat) ON DELETE CASCADE
);

CREATE TABLE PRODUCT_IMAGE(
    id_prod INT NOT NULL,
    id_img INT NOT NULL,
    PRIMARY KEY (id_prod, id_img),
    FOREIGN KEY (id_prod) REFERENCES PRODUCT(id_prod) ON DELETE CASCADE,
    FOREIGN KEY (id_img) REFERENCES IMAGE(id_img) ON DELETE CASCADE
);

CREATE TABLE ORDER_PRODUCT (
    id_order INT NOT NULL,
    id_prod INT NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    FOREIGN KEY (id_order) REFERENCES ORDERS(id_order) ON DELETE CASCADE,
    FOREIGN KEY (id_prod) REFERENCES PRODUCT(id_prod) ON DELETE CASCADE
);

CREATE TABLE CART (
    id_cart SERIAL PRIMARY KEY,
    id_user INT NOT NULL,
    id_prod INT NOT NULL,
    quantity INT NOT NULL,
    FOREIGN KEY (id_user) REFERENCES USERS(id_user),
    FOREIGN KEY (id_prod) REFERENCES PRODUCT(id_prod)
);

CREATE TABLE SHOWCASE (
    id_show SERIAL PRIMARY KEY,
    id_cat INT NOT NULL,
    FOREIGN KEY (id_cat) REFERENCES CATEGORY(id_cat)
);

CREATE TABLE A_PROPOS (
    id_apropos SERIAL PRIMARY KEY,
    content TEXT NOT NULL
);

CREATE TABLE FAQ (
    id_faq SERIAL PRIMARY KEY,
    content TEXT NOT NULL
);

-- Faire un trigger qui supprime une category si elle n'est plus utilisée

CREATE OR REPLACE FUNCTION delete_category() RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM CATEGORY
    WHERE id_cat NOT IN (SELECT id_cat FROM PRODUCT_CATEGORY);
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER delete_category
AFTER DELETE ON PRODUCT_CATEGORY
FOR EACH ROW
EXECUTE FUNCTION delete_category();

-- Faire un trigger qui quand on passe le is_star d'un produit à true, passe tous les autres à false
CREATE OR REPLACE FUNCTION set_star() RETURNS TRIGGER AS $$
BEGIN
    -- Désactiver le statut "is_star" pour tous les autres produits
    UPDATE PRODUCT
    SET is_star = FALSE
    WHERE id_prod != NEW.id_prod AND is_star = TRUE;

    -- Retourner la nouvelle ligne
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Création du trigger
CREATE TRIGGER set_star
BEFORE UPDATE OF is_star ON PRODUCT
FOR EACH ROW
WHEN (NEW.is_star = TRUE) -- Exécuter seulement si on met "is_star" à TRUE
EXECUTE FUNCTION set_star();
